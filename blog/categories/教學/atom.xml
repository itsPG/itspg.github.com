<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 教學 | itsPG.org]]></title>
  <link href="http://itsPG.github.com/blog/categories/教學/atom.xml" rel="self"/>
  <link href="http://itsPG.github.com/"/>
  <updated>2013-01-13T18:29:13+08:00</updated>
  <id>http://itsPG.github.com/</id>
  <author>
    <name><![CDATA[PG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[教學] 在Mac Book AIR 11mid 上，製作Lion安裝隨身碟 / MBA 還原隨身碟]]></title>
    <link href="http://itsPG.github.com/blog/2012/05/10/lion-recovery-usb-from-mba11/"/>
    <updated>2012-05-10T15:04:00+08:00</updated>
    <id>http://itsPG.github.com/blog/2012/05/10/lion-recovery-usb-from-mba11</id>
    <content type="html"><![CDATA[<p>這版的MBA取消了以往慣例上會附贈的精美還原隨身碟，改用復原磁區上的系統自動從網站上抓取安裝檔進行重灌，所以每次想要重灌Mac的時候，都要花一兩個小時下載將近4G的安裝檔，對於網路速度不快的人來說無疑是個惡夢。</p>

<p>這篇教學主要是教你怎樣利用MBA復原磁區上的程式抓取安裝檔，以及另外備份安裝檔，以後重灌的時候就不用每次都要另外抓安裝程式。</p>

<!-- more -->


<p>這整篇的原理是</p>

<h2>在Lion下，打開安裝程式，把Lion安裝到另外一個目標硬碟，在下載完安裝用映像檔後，實際安裝之前，將安裝程式中斷
</h2>


<p>由於Lion安裝完後就會把安裝檔刪除，所以我們只能用這個方法取得刪除前的安裝程式。</p>

<h2>step 1.</h2>

<p>首先，請先準備一個可以安裝Lion的隨身硬碟（或是隨身碟），容量必須能夠裝下Lion的安裝檔以及Lion本身，所以容量最好有16G以上。</p>

<h2>step 2.</h2>

<p>打開工具程式裡面的磁碟管理工具，將隨身碟格式化成mac的檔案系統
<img src="http://farm8.staticflickr.com/7228/7170064012_622ebd55cf_z.jpg" alt="" /></p>

<h2>step 3.</h2>

<p>打開終端機，輸入</p>

<pre><code>diskutil mount readOnly /dev/disk0s3
hdiutil attach "/Volumes/Recovery HD/com.apple.recovery.boot/BaseSystem.dmg"
</code></pre>

<p>第一個指令是把隱藏磁區掛載起來，第二個指令是把隱藏的復原程式dmg檔掛載起來</p>

<p><img src="http://farm8.staticflickr.com/7087/7170063888_0a0e0701fa_z.jpg" alt="" /></p>

<h2>step 4.</h2>

<p>在Finder裡面打開<code>Mac OS X Base System</code>裡面的Lion安裝程式，在安裝選擇磁碟的時候，<strong>記得將安裝目標設定為隨身硬碟或是隨身碟</strong>，如此才能將安裝程式下載到隨身碟上。
<img src="http://farm6.staticflickr.com/5279/7170064158_48a53ca45b_z.jpg" alt="" />
<img src="http://farm9.staticflickr.com/8001/7170063678_68f4af3cbe_z.jpg" alt="" />
<img src="http://farm8.staticflickr.com/7228/7170063752_02dc765183_z.jpg" alt="" /></p>

<p>接下來會開始下載安裝Lion的映像檔。</p>

<h2>step 5.</h2>

<p>下載倒數到零之後，mac會花一段時間驗證下載的檔案是否正確，驗證完之後會進入自動重開機的倒數。在倒數的時候，在畫面上點一下可以暫停讀秒，改為手動重新開機，如果怕來不及的話，<strong>可以隨便先打開一個關閉之前會確認是否要存檔的程式</strong>（例如說，打開word，隨便打一些字，如此在系統自動重開機之前就會問你要不要存檔），如此可以中斷自動重新開機的流程。
<img src="http://farm8.staticflickr.com/7211/7170064456_0bb7eab226_z.jpg" alt="" />
<img src="http://farm8.staticflickr.com/7211/7170064720_dd749bdc56_z.jpg" alt="" />
<strong>在finder中，卸載磁碟機後把隨身碟拔除，然後按下<code>cmd+q</code>離開安裝程式</strong></p>

<p>許多人會在這步驟失敗，是因為忘記先把隨身碟拔起來就急著離開Lion的安裝程式。</p>

<h2>step 6.</h2>

<p>重新插上隨身碟，裡面的<code>Mac OS X Install Data</code>就是我們要的東西摟</p>

<p><img src="http://farm9.staticflickr.com/8001/7170063570_c5a74135f6_z.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[教學] 移除amazon kindle的DRM保護 （How to remove DRM from kindle）]]></title>
    <link href="http://itsPG.github.com/blog/2012/05/04/how-to-remove-drm-from-kindle/"/>
    <updated>2012-05-04T02:58:00+08:00</updated>
    <id>http://itsPG.github.com/blog/2012/05/04/how-to-remove-drm-from-kindle</id>
    <content type="html"><![CDATA[<p>這篇文章教你如何將自己從amazon上購買的電子書，移除DRM並複製到其他裝置上觀看。</p>

<p>雖然是老生常談了不過還是重申一下，請在合法備份的前提下使用此工具。</p>

<!-- more -->


<p>以下教學環境以windows 7 為主，其他的環境可以參考以下的blog，有很詳細的介紹與說明。</p>

<p>教學網址： <a href="http://apprenticealf.wordpress.com/">http://apprenticealf.wordpress.com/</a></p>

<p>這邊簡述一下你需要做哪些事情，以及我個人在實際操作時所遇到的問題</p>

<h2>1.安裝python 2.7</h2>

<p>到<a href="http://www.python.org/">http://www.python.org/</a>抓，版本2.7，小心不要抓到第三版的，如果你的電腦曾經安裝過python 3的話，即使重裝二版，電腦在執行該程式的時候仍然會以三版為主，在這邊提供一個簡單的解決方法： <strong>將C:\python32 與 C:\python27 資料夾名稱暫時互換</strong> 就可以用最簡單無痛的方法暫時改變電腦上python的版本。</p>

<h2>2.下載script</h2>

<p>本篇文章撰寫的時候是第五版</p>

<p>下載位址：<a href="http://www.datafilehost.com/download-be42f5d1.html">點我</a></p>

<h2>3.解開壓縮檔內的DeDRM_v5.0_WinApp壓縮檔</h2>

<p>要解壓縮到哪邊都沒關係，這個資料夾會在第五步驟裡面用到</p>

<h2>4.找出你要移除drm的電子書</h2>

<p>資料夾預設位置在<code>C:\Users\使用者名稱\Documents\My Kindle Content</code>下，附檔名為azw的檔案就是。</p>

<h2>5.進行drm移除</h2>

<p>將欲移除的檔案拖放到DeDRM_Drop_Target.bat上即可，成功的話會在原azw存放的資料夾下多出一個.mobi檔案，該檔案即為除去DRM後的電子書檔案副本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[教學] 在Windows下建立GNU編譯環境]]></title>
    <link href="http://itsPG.github.com/blog/2012/04/06/windows-gnu-tutorial/"/>
    <updated>2012-04-06T18:17:00+08:00</updated>
    <id>http://itsPG.github.com/blog/2012/04/06/windows-gnu-tutorial</id>
    <content type="html"><![CDATA[<p>這是一篇如何在windows下編譯C/C++程式的教學，這篇教學會教你怎樣在windows下搭起gcc compiler 以及 gnu make，這兩個在linux下寫程式不可或缺的工具，雖說比起Dev-C等無腦工具來說，建立gnu環境是麻煩了些，可是這套工具在linux下同樣適用，提早學習的話，到時候寫程式環境若是換到linux下就不用另外從頭學起摟。</p>

<!-- more -->


<h1>在Windows下建立GNU編譯環境</h1>

<h2>0.懶人包</h2>

<p>適合懶得google抓檔案的人</p>

<p>mingw + make for windows 懶人包： <a href="https://sites.google.com/a/eruru.tw/pg/ruan-ti/win_gnu.rar?attredirects=0&amp;d=1">點我下載</a></p>

<p>Sublime for windows x64 懶人包： <a href="https://sites.google.com/a/eruru.tw/pg/ruan-ti/sublime2181_x64.rar?attredirects=0&amp;d=1">點我下載</a></p>

<p>makefile 範例程式： <a href="https://sites.google.com/a/eruru.tw/pg/ruan-ti/learn_makefile.rar?attredirects=0&amp;d=1">點我下載</a></p>

<p>這個範例程式裡面有一個makefile簡單的範例，如果不知道makefile長怎樣的話，可以抓回去研究看看</p>

<h2>1. 安裝mingw</h2>

<p>關鍵字：<code>mingw-get-inst</code> 用google搜一下，抓最新的回來安裝就好</p>

<p>安裝的過程中遇到這個畫面的時候，記得把C++編譯器打勾</p>

<h2>2. 安裝make for windows</h2>

<p>關鍵字：<code>make for windows</code>，一樣是抓新版的回來裝</p>

<h2>3.修改環境變數</h2>

<p><code>開始</code> >> <code>我的電腦</code>按右鍵 >> <code>內容</code> >> <code>進階系統設定</code></p>

<p>切換到<code>進階</code>分頁 >> <code>環境變數</code></p>

<p>在<code>Path</code>變數加入以下兩組路徑，路徑之間記得用<code>;</code>(分號)隔開</p>

<p><code>C:\MinGW\bin</code></p>

<p><code>C:\Program Files (x86)\GnuWin32\bin</code></p>

<h2>4.安裝sublime </h2>

<p>google <code>sublime</code>，一樣是挑新版回來抓就好摟</p>

<h2>5.如何編譯程式</h2>

<p>在命令列的環境下，打<code>g++ -o filename.exe filename.cpp</code></p>

<p>就會把filename.cpp編譯成 filename.exe</p>

<h2>6.建立命令列的捷徑 (選擇性步驟)</h2>

<p>由於編譯以及測試會大量的使用到命令列模式，因此建議你在工作目錄下面弄一個開啟命令列的捷徑，方法如下</p>

<p>6.1 開啟文字編輯器，輸入<code>cmd</code>這三個字</p>

<p>6.2 把這個檔案存在你的工作目錄下，檔名為<code>a.bat</code></p>

<p>6.3 以後直接打開<code>a.bat</code>這個檔案就可以進入命令列模式</p>

<h1>撰寫makefile</h1>

<p>makefile簡單的說，就是一個編譯指令的懶人包，</p>

<p>試想，若我們有一天編譯一個專案，需要同時執行g++幾百次，在命令列下面慢慢打入這些指令很浪費時間且不切實際，而make就是把這些編譯過程中所需要用到的指令紀錄在一個makefile檔上，讓我們打下對應的目標時，就幫助我們執行一大段指令，減低我們編譯時的負擔</p>

<p>實際上makefile的存在是為了降低大型專案裡面重編譯系統的時間，一個幾百萬行的專案，若是我們只修改其中部份的原始碼的話，可以利用make重新編譯裡面部份的程式碼並重新連結整個專案，可以大幅降低重新編譯專案的時間(可能是從幾個小時降低到幾分鐘的差距)，但這部份牽扯到許多相對複雜的細節，因此不在這篇教學的討論範圍內，想知道更詳細的內容可以自行google <code>makefile</code></p>

<p>如何撰寫makefile又是另外一套學問...</p>

<p>初學者有以下的概念即可</p>

<blockquote><h3>當我們打下<code>make xxx</code>指令的時候，make會搜尋該目錄下是否有取名為makefile的檔案，若有的話，會尋找makefile內有沒有xxx規則，若有的話將會依照該規則所指定的指令進行編譯，若沒有的話會回報錯誤</h3>

<h3>當我們打make時沒有指定目標規則的時候，make預設會執行makefile的第一條規則</h3></blockquote>

<h2>1.建立新資料夾</h2>

<p>因為在同一個資料夾下的檔案會共用同樣的makefile   <br/>
所以養成良好習慣，同一個資料夾下放同一個專案</p>

<h2>2.在該資料夾下建立檔案makefile</h2>

<p>開啟文字編輯器編輯一個新的純文字檔案，檔名取為<code>makefile</code>    <br/>
檔案內容輸入</p>

<pre><code>main: filename.cpp
    g++ -o filename.exe filename.cpp
</code></pre>

<p>（filename請自行替換成目標的程式原始檔檔名）</p>

<p>存檔即可</p>

<h2>3. 利用make 進行編譯</h2>

<p>makefile建立完之後，在該目錄下打入<code>make main</code>，就可以根據main這條我們自行定義的規則進行編譯摟，當然，我們打<code>make</code>也可，由於我們直接打<code>make</code>的時候，make會根據makefile裡面的第一條規則進行處理，在這個範例中，第一條規則是main，所以我們執行<code>make</code>時就等同於<code>make main</code>摟</p>

<h2>4.利用sublime的編譯系統進行make</h2>

<p>在sublime下，可以利用ctrl+B這個快捷鍵直接呼叫make替我們編譯，如果ctrl+B並沒有正確的呼叫make的話，檢查一下</p>

<h3>sublime是否開啟正確的檔案</h3>

<p>還記得嗎，同一個目錄下會共用同一個makefile，而sublime呼叫make時給的makefile是以<strong>此時正在編譯的檔案</strong>為準</p>

<h3>sublime是否指定了<code>make</code>為目標的編譯系統</h3>

<p>在<code>Tools</code> >> <code>Build System</code> 裡面，指定<code>Make</code>即可</p>

<h1>寫在最後</h1>

<p>由於每個人的環境不盡相同，而對於初學者來說，第一次建立gnu compiler環境也確實有他的難度在，因此如果你在安裝上有出任何問題，又或者是認為這份教學有哪邊你覺得很難懂的，歡迎留言，我會在時間允許的範圍下盡力改進這份教學以及在我能力範圍內回答你的問題</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[教學] 在windows上安裝octopress 新手教學 / 初學者指南]]></title>
    <link href="http://itsPG.github.com/blog/2012/02/29/octopress-on-windows-tutorial/"/>
    <updated>2012-02-29T19:39:00+08:00</updated>
    <id>http://itsPG.github.com/blog/2012/02/29/octopress-on-windows-tutorial</id>
    <content type="html"><![CDATA[<p>以下是今天測試過，確定可以順利安裝octopress並成功發佈到github的流程，octopress安裝過程繁複，上手不易，希望這篇簡單的教學可以幫助第一次使用octopress的人順利架起環境。</p>

<p>另，在依照這篇教學一步一步操作之前，請先確定</p>

<ul>
<li>你的windows已經安裝完git</li>
<li>你已經有一個github的帳號</li>
<li>已經擁有"username.github.com"這個repo</li>
</ul>


<p>關於這部份的教學可以google "github page"，或者是參考我寫的<a href="http://itspg.github.com/blog/2012/02/29/github-on-windows-tutorial/">這篇教學</a>在這邊就不再贅述了。</p>

<!-- more -->


<h2>1.安裝ruby環境</h2>

<p>在<a href="http://rubyinstaller.org/downloads/">http://rubyinstaller.org/downloads/</a> 中，下載RubyInstaller 1.9.2-p290這個版本並安裝</p>

<h2>2.安裝ruby的Devkit</h2>

<h3>2.1 在同樣的頁面，找到Development Kit，下載並解壓縮</h3>

<h3>2.2 進入剛剛解壓縮的資料夾，打入以下指令</h3>

<pre><code>ruby dk.rb init
ruby dk.rb install
</code></pre>

<p>以下步驟開始請從開始功能表中的 "Start Command Prompt with Ruby" 的環境下進行</p>

<h2>3.更新gem</h2>

<pre><code>gem update --system
</code></pre>

<h2>4.抓取octopress原始碼並安裝</h2>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
gem install bundler
bundle install
rake install
</code></pre>

<h2>5.設定github相關的deploy設定</h2>

<pre><code>rake setup_github_pages
</code></pre>

<p>這時候他會問你github上ssh的路徑，一般來說長得像是這樣</p>

<p><code>git@github.com:rixia/rixia.github.com.git</code></p>

<p>rixia請自行代換成你的使用者名稱</p>

<h2>6.編輯_config.yml</h2>

<p>這個檔案是Blog的相關設定，打開後可以依照需要自行修改，懶的改的話跳過這個步驟也可</p>

<h2>7.建立新文章</h2>

<pre><code>rake new_post["this is the title"]
</code></pre>

<p>打完指令後在_posts下就會出現該篇文章，可以自己打開來修改並加入內容</p>

<h2>8.發佈</h2>

<pre><code>rake generate
rake deploy
</code></pre>

<p>打完以上指令之後就會把內容編譯後上傳到github上<br/>
在上傳到github前，你也可以用<code>rake preview</code>指令，觀看預覽<br/>
預覽結果會出現在<code>http://127.0.0.1:4000</code></p>

<h2>如果在<code>rake generate</code>時出錯</h2>

<p>這是Jekyll編譯原始碼的時候遇到UTF-8會發生的編碼問題<br/>
解決方法如下：在<code>rake generate</code>之前先打入以下指令</p>

<pre><code>set LC_ALL=zh_TW.UTF-8
set LANG=zh_TW.UTF-8
</code></pre>

<p>即可解決問題</p>

<h1>結尾</h1>

<p>最簡單的安裝教學大致上就是這樣。</p>

<p>剩下進一步的操作，<a href="http://octopress.org/docs/">官方文件</a>上面解說的算詳盡，可以參考看看</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[教學] 在windows上使用github 新手教學 / 初學者指南]]></title>
    <link href="http://itsPG.github.com/blog/2012/02/29/github-on-windows-tutorial/"/>
    <updated>2012-02-29T19:12:00+08:00</updated>
    <id>http://itsPG.github.com/blog/2012/02/29/github-on-windows-tutorial</id>
    <content type="html"><![CDATA[<p>這篇文章的定位是補齊github在windows上文件的缺乏，希望第一次用git / github的人，也可以依照這份文件來快速上手，另，由於git博大精深，不可能將所有的功能一一介紹，因此這份教學著重於設定好最基本的git環境，以及能夠達到最基本的git commit / git push功能，希望這樣的文章編排可以盡量降低初學者上手的門檻。</p>

<!-- more -->


<h1>github 基礎設定</h1>

<h2>1. 註冊github</h2>

<p>網址在這邊：<a href="https://github.com/">https://github.com/</a></p>

<h2>2. 安裝Windows版的 git</h2>

<p>請使用支援UTF-8檔名的windows版 git
<img src="http://farm8.staticflickr.com/7180/6794683516_34849d52ca_z.jpg" alt="" /></p>

<p><a href="http://code.google.com/p/utf8-git-on-windows/downloads/list">git下載位址</a></p>

<h2>3. 為此台電腦建立識別金鑰</h2>

<p>這步驟比較麻煩，尤其是對於沒摸過Unix / Linux系列的人來說更是如此...</p>

<h3>3.1 建立金鑰對</h3>

<p>從開始功能表裡面打開git bash
<img src="http://farm8.staticflickr.com/7208/6794683530_3cfcb2c779.jpg" alt="" /></p>

<p>打入以下指令，產生一把識別電腦用的金鑰<br/>
ssh-keygen -t rsa -C "rixia@miko.tw"<br/>
打完指令之後程式會詢問金鑰存放位址，直接按Enter採用預設值即可<br/>
接下來詢問是否使用密碼，若在此步驟中填入密碼，則以後每次使用github上傳程式碼的時候都必須打上此組密碼<br/>
如果不想每次傳檔都打密碼的話，就留白直接Enter吧</p>

<p>再次確認密碼，沒密碼的話直接Enter，有密碼的話打完密碼按Enter</p>

<h3>3.2 複製公開金鑰</h3>

<p>用記事本打開 <code>C:\Users\你的使用者名稱\.ssh\id_rsa.pub</code> 這個檔案 把裡面的內容複製下來</p>

<h3>3.3 填入金鑰</h3>

<p>在設定畫面中的SSH keys裡面，把剛剛複製到的公開金鑰貼上去
<img src="http://farm8.staticflickr.com/7205/6794683546_94d1ba817a_b.jpg" alt="" /></p>

<h2>4. 設定使用者名稱以及郵件位址</h2>

<p>當你上傳程式碼的時候，會用這些資訊來辨識是誰上傳的</p>

<p>開啟命令列視窗(win+r>cmd，或是開始>執行>cmd)，打入以下兩行指令<br/>
git config --global user.name "Your Name"<br/>
git config --global user.email rixia@miko.tw</p>

<p>如果電腦重灌或者是換到新電腦上的話，重複步驟2～4即可</p>

<h1>github 建立新的Repository</h1>

<p>Repository就是倉庫，我們待會要拿來存code的地方..</p>

<p>個人首頁這邊點下去就對了
<img src="http://farm8.staticflickr.com/7055/6794683500_869905404d_b.jpg" alt="" /></p>

<p>基本資料輸入完之後，會出現一連串的指令教你怎樣建立本地端的repository並設定好遠端的repository<br/>
除了第四個指令'touch README'以外，都可以照作，以下稍微解釋一下每個步驟在幹麼</p>

<p><img src="http://farm8.staticflickr.com/7060/6940795989_b9da5a018f_b.jpg" alt="" /></p>

<ol>
<li><p><code>mkdir Hello-github</code></p></li>
<li><p><code>cd Hello-github</code></p></li>
<li><p><code>git init</code>
初始化本地的repository</p></li>
<li><p>在此目錄下建立一個README.txt檔案<br/>
開記事本隨便存一個空白檔案就好</p></li>
<li><p><code>git add README.txt</code>
追蹤README.txt這個檔案</p></li>
<li><p><code>git commit -m 'first commit'</code><br/>
提交一份commit到本地的repository(first commit是註解，可替換成你要的文字)</p></li>
<li><p><code>git remote add origin git@github.com:rixia/Hello-github.git</code><br/>
加入遠端repository</p></li>
<li><p>git push -u origin master<br/>
設定遠端的對應關係</p></li>
</ol>


<h1>接下來呢？</h1>

<p>你可以在這個目錄下隨意建立一些原始碼
利用<code>git add filename</code>追蹤它
利用<code>git commit -am "MSG"</code>提交一份commit到本地端
利用<code>git push</code>將本地端的修改同步到伺服器上</p>

<p>舉例來說，假設我寫了一個新的程式原始檔名叫做a.cpp<br/>
具體流程來說像是這個樣子</p>

<ol>
<li><p><code>git add a.cpp</code> 代表我們開始追蹤a.cpp這個檔案</p></li>
<li><p>對a.cpp中做一些修改</p></li>
<li><p><code>git commit -am "some message"</code> 將修改的快照保存下來</p></li>
<li><p>重複步驟2 步驟3 直到你滿意為止</p></li>
<li><p><code>git push</code> 將修改結果上傳到github上</p></li>
</ol>


<h1>寫在最後</h1>

<p>這篇所講到的功能不過是把程式碼修訂紀錄留下而已，git還有很多功能，用到熟練勢必需要投資大量的時間學習，但我們僅需最基本的幾個指令也能享受git給我們帶來的便利性。</p>

<p>在這邊列出幾個我比較常用的指令，想進一步學習的話可以考慮從這邊入門</p>

<p>這些是常用的branch相關的操作</p>

<ul>
<li>git checkout</li>
<li>git branch</li>
<li>git merge</li>
</ul>


<p>這些是常用的復原用操作</p>

<ul>
<li>git reflog</li>
<li>git reset</li>
<li>git revert</li>
</ul>

]]></content>
  </entry>
  
</feed>
